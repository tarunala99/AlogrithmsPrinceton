import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import edu.princeton.cs.algs4.MinPQ;

public class Solver {

    // find a solution to the initial board (using the A* algorithm)
	private MinPQ<Integer> queue = new MinPQ<Integer>();
	private Map<Integer,List<Board>> map = new HashMap<Integer,List<Board>>();
    public Solver(Board initial)
    {
    	Iterator<Board> test = initial.neighbors().iterator();
    	int count =1;
    	while(test.hasNext())
    	{
    		int priority = test.next().manhattan()+count;
    		queue.insert(priority);
    		List<Board> tempList = map.containsKey(priority)? map.get(priority):new ArrayList<Board>();
    		if()
    		{
    			tempList = map.get(priority);
    		}
    		else
    		{
    			tempList = new ArrayList<Board>();
    		}

    	}
    }

    // is the initial board solvable? (see below)
    public boolean isSolvable()
    {
    	
    }

    // min number of moves to solve initial board
    public int moves()
    {
    	
    }

    // sequence of boards in a shortest solution
    public Iterable<Board> solution()
    {
    	
    }

    // test client (see below) 
    public static void main(String[] args)
    {
    	int[][] temp = {{0,1,3},{4,2,5},{7,8,6}};
    	int[][] temp1 = {{0,1,3},{4,2,5},{7,8,6}};
    	Board board = new Board(temp);
    	Solver solver = new Solver(board);
    }

}