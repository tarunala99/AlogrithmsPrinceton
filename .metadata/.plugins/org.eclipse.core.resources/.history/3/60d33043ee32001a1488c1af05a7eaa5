import java.util.Iterator;

class Node<Item>{
	//The item here needs to be generic rather than using an object
	Item data;
	Node<Item> next;
}


public class Deque<Item> implements Iterable<Item> {
	
	//Implementing using a linked list
	
    // construct an empty deque
	
	public int queueSize = 0;
	public Node<Item> head = null;
	public Node<Item> tail = null;
	//Using a previous node to keep track of one of the directions
	public Node<Item> prevTail = null;
	
	public int maxSize = 0;
	
	//Empty constructor
    public Deque()
    {
    	
    }

    // is the deque empty?
    public boolean isEmpty()
    {
    	if(head==null)
    		return true;
    	return false;
    }

    // return the number of items on the deque
    public int size()
    {
    	return queueSize;
    }

    // add the item to the front
    //the tail is at the expanding end of the list
    public void addFirst(Item item)
    {
    	prevTail = tail;
    	Node<Item> temp = new Node<Item>();
    	temp.data = item;
    	if(tail!=null) //case where the queue is just initialized
    	{
    		tail.next = temp;
    	}
    	tail=temp;
    	queueSize++;
    	//if it is the first element then reassign the head to the tail
    	if(head==null)
    	{
    		head = tail;
    	}
    }

    // add the item to the back
    public void addLast(Item item)
    {
    	Node temp = new Node();
    	temp.data = item;
    	temp.next = head;
    	head=temp;
    	
    	if(tail==null)
    	{
    		head = tail;
    	}
    	if(queueSize==1)
    	{
    		prevTail=head;
    	}
    	queueSize++;
    }

    // remove and return the item from the front
    public Item removeFirst()
    {
    	//Iterator<Node> friendList = tail.data; 
    	Item returnItem = (Item) tail.data;
    	prevTail.next=null;
    	tail=prevTail;
    	return returnItem;
    }

    // remove and return the item from the back
    public Item removeLast()
    {
    	Node temp = head.next;
    	head = temp.next;
    	head.next = null;
    	return (Item) head.data;
    }
    private class LinkedListIterator implements Iterator<Item>
    {
    	public boolean hasNext() {
    		if(head==null)
    			return false;
    		else
    			return true;
    	}
    	public void remove() {
    		
    	}
    	public Item next() {
    		Item temp =(Item) head.data;
    		head=head.next;
    		return temp;
    	}
    	
    }
    
    // return an iterator over items in order from front to back
    public Iterator<Item> iterator()
    {
    	return new LinkedListIterator();
    }

    // unit testing (required)
    public static void main(String[] args)
    {
    	Deque<Integer> queue = new Deque<Integer>();
    	queue.addFirst(1);
    	queue.addFirst(2);
    	queue.addFirst(3);
    	queue.addFirst(4);
    	for(Integer temp :queue )
    	{
    		System.out.println(temp);
    	}
    }

}