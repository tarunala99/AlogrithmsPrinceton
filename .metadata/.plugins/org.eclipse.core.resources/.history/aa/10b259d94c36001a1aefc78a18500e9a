public class Board {

	private int[][] board;
	private int size;
    // create a board from an n-by-n array of tiles,
    // where tiles[row][col] = tile at (row, col)
    public Board(int[][] tiles)
    {
    	size = tiles.length;
    	board = tiles;
    }
                                           
    // string representation of this board
    public String toString()

    // board dimension n
    public int dimension()
    {
    	return size;
    }
    // number of tiles out of place
    public int hamming()
    {
    	int count = 0;
    	for(int i=1;i<=size*size;i++)
    	{
    		if(board[i] !=0 && board[i]!=i)
    		{
    			count++;
    		}
    	}
    	return count;
    }
    // sum of Manhattan distances between tiles and goal
    public int manhattan()
    {
    	int count = 0;
    	for(int i=1;i<=size*size;i++)
    	{
    		if(board[i] !=0 && board[i]!=i)
    		{
    			count++;
    		}
    	}
    	return count;
    	
    }
    // is this board the goal board?
    public boolean isGoal()

    // does this board equal y?
    public boolean equals(Object y)

    // all neighboring boards
    public Iterable<Board> neighbors()

    // a board that is obtained by exchanging any pair of tiles
    public Board twin()

    // unit testing (not graded)
    public static void main(String[] args)

}
