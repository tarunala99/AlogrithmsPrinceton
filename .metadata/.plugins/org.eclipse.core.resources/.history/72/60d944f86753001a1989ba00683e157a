import java.util.Arrays;
import java.util.Comparator;

import edu.princeton.cs.algs4.BinaryStdIn;
import edu.princeton.cs.algs4.BinaryStdOut;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

class Data{
	Character value;
	int index;
	Data(Character value, int index)
	{
		this.value=value;
		this.index=index;
	}
}

public class BurrowsWheeler {

    // apply Burrows-Wheeler transform,
    // reading from standard input and writing to standard output 
	
	private static String transformString;
	
	private static String createRotation(int offset, String string)
	{
		StringBuilder sb = new StringBuilder();
		Character start = string.charAt(0);
		String sub1 = string.substring(0,offset);
		String sub2 = string.substring(offset,string.length());
		sb.append(sub2);
		sb.append(sub1);
		return sb.toString();	
	}
	
    public static void transform()
    {
    	
    	String input =BinaryStdIn.readString();
    	CircularSuffixArray circularSuffixArray = new CircularSuffixArray(input);
    	StringBuilder sb = new StringBuilder();
    	for(int i=0;i<circularSuffixArray.length();i++)
    	{
    		int offset = circularSuffixArray.index(i);
    		String string= createRotation(offset,input);
    		sb.append(string.charAt(string.length()-1));
    	}
    	String resultString = sb.toString();
    	BinaryStdOut.write(resultString);
    	transformString = resultString; 
    }

    // apply Burrows-Wheeler inverse transform,
    // reading from standard input and writing to standard output
    public static void inverseTransform()
    {
    	String string = StdIn.readString();
    	Data[] charList = new Data[string.length()];
    	for(int i=0;i<charList.length;i++)
    	{
    		Character tempChar = string.charAt(i);
    		Data node = new Data(tempChar,i);
    		charList[i]=node;
    	}	
    	Arrays.sort(charList,new CharComparator());
    	StringBuilder sb = new StringBuilder();
    	int first = charList[0].index;
    	sb = new StringBuilder();
    	while(sb.length()<charList.length)
    	{
    		
    		Data node = charList[first];
    		sb.append(node.value);
    		first = node.index;
    	}
    	StdOut.print(sb.toString());
    }

    private static class CharComparator implements Comparator<Data> {
        @Override
        public int compare(Data string1, Data string2) {
        	Character temp1 = string1.value;
        	Character temp2 = string2.value;
        	return temp1.compareTo(temp2);
        }
    }
    
    // if args[0] is "-", apply Burrows-Wheeler transform
    // if args[0] is "+", apply Burrows-Wheeler inverse transform
    public static void main(String[] args)
    {
    	BurrowsWheeler.transform();
    	BurrowsWheeler.inverseTransform();
    }

}