public class Board {

	private int[][] board;
	private int size;
    // create a board from an n-by-n array of tiles,
    // where tiles[row][col] = tile at (row, col)
    public Board(int[][] tiles)
    {
    	size = tiles.length;
    	board = tiles;
    }
                                           
    // string representation of this board
    public String toString()
    {
    	return null;
    }

    // board dimension n
    public int dimension()
    {
    	return size;
    }
    
    private int singleRow(int row,int column)
    {
    	return column+size*(row-1);
    }
    
    private int rowNo(int index)
    {
    	System.out.println("The current row is "+index/size);
    	return ((index-1)/size+1);
    }
    private int columnNo(int index)
    {
    	System.out.println("The current column is "+index%size);
    	return ((index-1)%size+1);
    }
    
 // number of tiles out of place
    public int hamming()
    {
    	int count = 0;
    	for(int i=1;i<=size;i++)
    	{
    		for(int j=1;j<=size;j++)
    		{
    			if(board[i-1][j-1]!=0 && board[i-1][j-1]!=singleRow(i,j))
	    		{
	    			count++;
	    		}
    		}
    	}
    	return count;
    }
    // sum of Manhattan distances between tiles and goal
    public int manhattan()
    {
    	int count = 0;
    	for(int i=1;i<=size;i++)
    	{
    		for(int j=1;j<=size;j++)
    		{
    			int currentNo = board[i-1][j-1];
    			if(currentNo!=0)
    			{
    				count = count + Math.abs(rowNo(currentNo)-(i));
    				count = count + Math.abs(columnNo(currentNo)-(j));
    				System.out.println("The current count is "+count+" and the number is "+currentNo);
    			}
    		}
    	}
    	return count;
    	
    }
    // is this board the goal board?
    public boolean isGoal()
    {
    	if(hamming()==0)
    	{
    		return true;
    	}
    	return false;
    }

    // does this board equal y?
    public boolean equals(Object y)
    {
    	int[][] tempObj =(int[][]) y;
    	if(tempObj.length==size)
    	{
    		int count = 0;
    		for(int i=0;i<size;i++)
    		{
    			for(int j=0;j<size;j++)
    			{
    				count=count+Math.abs((tempObj[i][j]-board[i][j]));
    			}
    			if(count>0)
    			{
    				return false;
    			}
    		}
    	}
    	else {
    		return false;
    	}
    	return true;
    }

    // all neighboring boards
    public Iterable<Board> neighbors()
    {
    	return null;
    }

    // a board that is obtained by exchanging any pair of tiles
    public Board twin()
    {
    	return null;
    }

    // unit testing (not graded)
    public static void main(String[] args)
    {
    	int[][] temp = {{0,1,3},{4,2,5},{7,8,6}};
    	int[][] temp1 = {{0,1,3},{4,2,5},{7,8,6}};
    	Board board = new Board(temp);
    	System.out.println(board.equals(temp1)+"he length is "+temp1.length);
    	System.out.println("The hamming distance is "+board.hamming()+" and the manhattan distance is "+board.manhattan());
    }

}
