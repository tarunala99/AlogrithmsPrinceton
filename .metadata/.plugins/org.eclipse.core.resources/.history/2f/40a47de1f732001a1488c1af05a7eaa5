import java.util.Iterator;

public class RandomizedQueue<Item> implements Iterable<Item> {
	//using an array to be able to remove elements in constant time with the index
	//use dynamic sizing for the array so that the insert elements are in constant time
	//java doesn't have the dynamic sizing option, but the array list takes care of this

	public Item[] queue;
	public int size;
    // construct an empty randomized queue
	//cannot create an array of Items
    public RandomizedQueue()
    {
    	queue = (Item[])new Object[1];
    }

    // is the randomized queue empty?
    public boolean isEmpty()
    {
    	if(size==0)
    		return true;
    	else
    		return false;
    }

    // return the number of items on the randomized queue
    public int size()
    {
    	return size;
    }
    
    private void resizeArray()
    {
    	Item[] temp = null;
    	if(size>queue.length)
    	{
    		//the array is full here
    		 temp = (Item[])new Object[2*queue.length];
    		 System.arraycopy( queue, 0, temp, 0, size );
    		 queue = temp;
    	}
    	else if(size<queue.length/4)
    	{
    		 temp = (Item[])new Object[queue.length/2];
    		 System.arraycopy( queue, 0, temp, 0, size );
    		 queue = temp;
    	}
    }

    // add the item
    public void enqueue(Item item)
    {
    	size=size+1;
    	resizeArray();
    	queue[size]=item;
    }

    // remove and return a random item
    public Item dequeue()
    {
    	int index = StdRandom.uniform(0, size);
    	return null;
    }

    // return a random item (but do not remove it)
    public Item sample()
    {
    	int index = StdRandom.uniform(0, size);
    	return queue[index];
    }

    
    private class ArrayListIterator implements Iterator<Item>
    {
    	public boolean hasNext() {
    		if(head==null)
    			return false;
    		else
    			return true;
    	}
    	public void remove() {
    		
    	}
    	public Item next() {
    		Item temp =(Item) head.data;
    		head=head.next;
    		return temp;
    	}	
    }
    
    // return an independent iterator over items in random order
    public Iterator<Item> iterator(){
    	return null;
    }

    // unit testing (required)
    public static void main(String[] args)
    {
    	System.out.println("hello world");
    }

}