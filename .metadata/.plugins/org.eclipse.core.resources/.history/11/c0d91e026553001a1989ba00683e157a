import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Out;

public class MoveToFront {
	
	private static List<Character> charList;
	private static List<Integer> resultList;

	private static void initList()
	{
		charList = new LinkedList<Character>();
		resultList = new ArrayList<Integer>();
		for(int i=0;i<256;i++)
		{
			charList.add((char) i);
		}
	}

    // apply move-to-front encoding, reading from standard input and writing to standard output
    public static void encode()
    {
    	initList();
    	StdIn in = new StdIn();
    	Out out = new Out();
    	
    	while(in.hasNextChar())
    	{
    		Character temp =  in.readChar();
    		int index = charList.indexOf(temp);
    		charList.remove(index);
    		charList.add(0, temp);
    		out.print(index);
    		resultList.add(index);
    	}	
    }

    // apply move-to-front decoding, reading from standard input and writing to standard output
    public static void decode()
    {
    	initList();
    	In in = new In();
    	Out out = new Out();
    	StringBuilder sb = new StringBuilder();
    	while(in.hasNextChar())
    	{
    		Character temp =  in.readChar();
    		int index = (int) temp;
    		charList.remove(index);
    		charList.add(0, temp);
    		sb.append(charList.get(index));
    		out.print(charList.get(index));
    	}
    	
    }

    // if args[0] is "-", apply move-to-front encoding
    // if args[0] is "+", apply move-to-front decoding
    public static void main(String[] args)
    {
    	MoveToFront.encode();
    	for(Integer temp : resultList)
    	{
    		String Hex=Integer.toHexString(temp);
    		System.out.println(Hex);
    	}
    }

}