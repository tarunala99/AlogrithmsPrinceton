import java.util.Iterator;

import edu.princeton.cs.algs4.MinPQ;

public class Solver {

    // find a solution to the initial board (using the A* algorithm)
	MinPQ queue = new MinPQ();
    public Solver(Board initial)
    {
    	Iterator<Board> test = initial.neighbors().iterator();
    	int count =1;
    	while(test.hasNext())
    	{
    		int priority = test.next().manhattan()+count;
    	}
    }

    // is the initial board solvable? (see below)
    public boolean isSolvable()
    {
    	
    }

    // min number of moves to solve initial board
    public int moves()
    {
    	
    }

    // sequence of boards in a shortest solution
    public Iterable<Board> solution()
    {
    	
    }

    // test client (see below) 
    public static void main(String[] args)
    {
    	int[][] temp = {{0,1,3},{4,2,5},{7,8,6}};
    	int[][] temp1 = {{0,1,3},{4,2,5},{7,8,6}};
    	Board board = new Board(temp);
    	Solver solver = new Solver(board);
    }

}