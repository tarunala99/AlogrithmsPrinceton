import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import edu.princeton.cs.algs4.BinaryStdIn;
import edu.princeton.cs.algs4.BinaryStdOut;
import edu.princeton.cs.algs4.In;

public class MoveToFront {

	private List<Character> initList()
	{
		List<Character> charList = new LinkedList<Character>();
		for(int i=0;i<256;i++)
		{
			charList.add((char) i);
		}
		return charList;
	}

    // apply move-to-front encoding, reading from standard input and writing to standard output
	 public static void encode() {
	        char moveToFront[] = new char[256];
	        // initialize
	        for (int i = 0; i < 256; i++) {
	            moveToFront[i] = ((char) i);
	        }
	        ArrayList<Character> outL = new ArrayList<Character>();
	        In in = new In("abra.txt.mtf");
	        while (in.hasNextChar()) {
	            char curChar = in.readChar();
	            for (int j = 0; j < moveToFront.length; j++) {
	                if (curChar == moveToFront[j]) {
	                    outL.add((char) j);
	                    // move jth character to the front
	                    // shift everything else
	                    for (int k = j; k > 0; k--) {
	                        moveToFront[k] = moveToFront[k - 1];
	                    }
	                    moveToFront[0] = curChar;
	                    break;

	                }
	            }
	        }
	        for (char outC : outL) {
	            System.out.println(Integer.toHexString(outC));
	        }
	    }

    // apply move-to-front decoding, reading from standard input and writing to standard output
    public static void decode()
    {
    	MoveToFront moveToFront = new MoveToFront();
    	List<Character> charList = moveToFront.initList();
    	StringBuilder sb = new StringBuilder();
    	while(!BinaryStdIn.isEmpty())
    	{
    		Character temp =  BinaryStdIn.readChar();
    		int index = (int) temp;
    		charList.remove(index);
    		charList.add(0, temp);
    		sb.append(charList.get((char)index));
    		BinaryStdOut.write(charList.get(index));
    	}
    	
    }

    // if args[0] is "-", apply move-to-front encoding
    // if args[0] is "+", apply move-to-front decoding
    public static void main(String[] args)
    {
    	//if (args[0].compareTo("-") == 0)
            encode();
        //else if (args[0].compareTo("+") == 0)
        //    decode();
        //else
        //    throw new IllegalArgumentException("Not allowed");
    }

}